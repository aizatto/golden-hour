{"version":3,"sources":["Navbar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navbar","useState","collapsed","setCollapsed","color","dark","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","isOpen","navbar","Nav","className","NavItem","NavLink","time","date","moment","format","Times","props","sunCalc","SunCalc","getTimes","geolocation","lat","lng","dawn","nauticalDawn","sunrise","sunriseEnd","goldenHourEnd","goldenHour","sunsetStart","sunset","dusk","nauticalDusk","App","Date","latitude","localStorage","getItem","parseFloat","setLatitude","longitude","setLongitude","setLatitudeInLocalStorage","value","setItem","setLongitudeInLocalStorage","Container","FormGroup","check","row","Col","sm","size","offset","Button","navigator","getCurrentPosition","position","coords","Label","for","Input","name","type","onChange","e","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.42a522c6.chunk.js","sourcesContent":["/**\n * https://reactstrap.github.io/components/navbar/\n */\nimport React, { useState } from 'react';\nimport {\n  Collapse,\n  Nav,\n  Navbar as BootstrapNavbar,\n  NavbarBrand,\n  NavLink,\n  NavItem,\n  NavbarToggler,\n} from 'reactstrap';\n\nexport default function Navbar() {\n  const [collapsed, setCollapsed] = useState(false);\n\n  return (\n    <BootstrapNavbar color=\"dark\" dark expand=\"md\">\n      <NavbarBrand href=\"https://www.aizatto.com\">aizatto.com</NavbarBrand>\n      <NavbarToggler onClick={() => setCollapsed(!collapsed)} />\n      <Collapse isOpen={collapsed} navbar>\n        <Nav className=\"ml-auto\" navbar>\n          <NavItem>\n            <NavLink href=\"https://www.aizatto.com/\">aizatto.com</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink href=\"https://build.my/\">build.my</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink href=\"https://github.com/aizatto/golden-hour/\">GitHub</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink href=\"https://www.linkedin.com/in/aizatto\">LinkedIn</NavLink>\n          </NavItem>\n        </Nav>\n      </Collapse>\n    </BootstrapNavbar>\n  );\n}\n","import React, { useState } from 'react';\n// @ts-ignore\nimport SunCalc from 'suncalc2';\nimport moment from 'moment';\nimport { FormGroup, Label, Col, Input, Container, Button } from 'reactstrap';\nimport Navbar from './Navbar';\n\ninterface Geolocation {\n  lat: number,\n  lng: number,\n}\n\nfunction time(date: Date): string {\n  return moment(date).format('LTS');\n}\n\nconst Times: React.FC<{date: Date, geolocation: Geolocation}> = (props) => {\n  const sunCalc = SunCalc.getTimes(props.date, props.geolocation.lat, props.geolocation.lng);\n\n  return (\n    <>\n      <ul>\n        <li>Dawn: {time(sunCalc.dawn)}</li>\n        <li>Nautical Dawn: {time(sunCalc.nauticalDawn)}</li>\n        <li>Sunrise (Begins): {time(sunCalc.sunrise)}</li>\n        <li>Sunrise (Ends): {time(sunCalc.sunriseEnd)}</li>\n        <li>Morning Golden Hour (Ends): {time(sunCalc.goldenHourEnd)}</li>\n      </ul>\n      <ul>\n        <li>Evening Golden Hour (Begins): {time(sunCalc.goldenHour)}</li>\n        <li>Sunset (Begins): {time(sunCalc.sunsetStart)}</li>\n        <li>Sunset (Ends): {time(sunCalc.sunset)}</li>\n        <li>Dusk: {time(sunCalc.dusk)}</li>\n        <li>Nautical Dusk: {time(sunCalc.nauticalDusk)}</li>\n      </ul>\n    </>\n  );\n}\n\nconst App: React.FC = () => {\n  const [date] = useState(new Date());\n  const [latitude, setLatitude] = useState(() => {\n    const latitude = localStorage.getItem('latitude');\n    if (!latitude) {\n      return 0;\n    }\n\n    return parseFloat(latitude);\n  });\n  const [longitude, setLongitude] = useState(() => {\n    const longitude = localStorage.getItem('longitude');\n    if (!longitude) {\n      return 0;\n    }\n\n    return parseFloat(longitude);\n  });\n\n  const setLatitudeInLocalStorage = (value: number): void => {\n    setLatitude(value);\n    localStorage.setItem('latitude', `${value}`);\n  }\n\n  const setLongitudeInLocalStorage = (value: number): void => {\n    setLongitude(value);\n    localStorage.setItem('longitude', `${value}`);\n  }\n\n  const onClick = () => {\n    navigator.geolocation.getCurrentPosition((position) => {\n      setLatitudeInLocalStorage(position.coords.latitude);\n      setLongitudeInLocalStorage(position.coords.longitude);\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Container>\n        <FormGroup check row>\n          <Col sm={{ size: 10, offset: 2 }}>\n            <Button onClick={onClick}>\n              Geolocate me\n            </Button>\n          </Col>\n        </FormGroup>\n        <FormGroup row>\n          <Label for=\"latitude\" sm={2}>\n            Latitude\n          </Label>\n          <Col sm=\"10\">\n            <Input \n              name=\"latitude\"\n              type=\"number\"\n              value={latitude}\n              onChange={(e) => setLatitudeInLocalStorage(parseFloat(e.target.value))}\n            />\n          </Col>\n        </FormGroup>\n        <FormGroup row>\n          <Label for=\"latitude\" sm={2}>\n            Longitude\n          </Label>\n          <Col sm=\"10\">\n            <Input \n              name=\"latitude\"\n              type=\"number\"\n              value={longitude}\n              onChange={(e) => setLongitudeInLocalStorage(parseFloat(e.target.value))}\n            />\n          </Col>\n        </FormGroup>\n\n        <Times date={date} geolocation={{lat: latitude, lng: longitude}} />\n\n        Alternatives:\n        <ul>\n          <li><a href=\"http://www.golden-hour.com/\">http://www.golden-hour.com/</a></li>\n          <li><a href=\"https://app.photoephemeris.com/\">The Photographer's Ephemersis</a></li>\n          <li><a href=\"http://suncalc.net/\">SunCalc</a></li>\n          <li><a href=\"https://apps.apple.com/us/app/sol-sun-clock/id491537291\">iOS: Sol: Sun Clock</a></li>\n        </ul>\n\n        References:\n        <ul>\n          <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API\">Geolocation API</a></li>\n        </ul>\n\n        Wikipedia:\n        <ul>\n          <li><a href=\"https://en.wikipedia.org/wiki/Golden_hour_(photography)\">Golden hour (photography)</a></li>\n          <li><a href=\"https://en.wikipedia.org/wiki/Sunrise_equation\">Sunrise Equation</a></li>\n        </ul>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}